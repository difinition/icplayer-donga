<?xml version='1.0' encoding='utf-8'?>
<project name="icplayer" default="dist" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
    <taskdef name="for" classname="com.icplayer.ac.ForTask" classpath="addons/addon-compiler.jar"/>

        <!--     
             ■■ 001 ●100 [T]"dist"  : 플레이어 패키지 만들기
                     |  |
             ■■ 002  |  |_●01 [T]"validate-translations-javascript" : 파일 JSON 검증하기  => Python 스크립트는 특정 폴더 안의 JavaScript 파일을 처리하고, 해당 파일이 JSON 형식으로 변환 가능한지 검증
                     |  |
             ■■ 003  |  |_●02 [T]"build" : 프로젝트 빌드
                     |      |
             ■■ 004  |      |_●01 [T]"clean" : 프로젝트 클린
                     |      |              |_▶ 1) 디렉토리 삭제 : war/WEB-INF/classes 
                     |      |              |_▶ 2) 디렉토리 삭제 : war/icplayer
                     |      |              |_▶ 3) 디렉토리 삭제 : gwt-unitCache
                     |      |              
             ■■ 005  |      |_●02 [T]"test"  : 개발 및 운영 모드 테스트
                     |      |   |
             ■■ 006  |      |   |               _●01 [T]"addons"  : 애드온 복사
                     |      |   |              |                |_▶ 1) <ant dir="addons"/>  실행
                     |      |   |              |
             ■■ 007  |      |   |          _●01 [T]"javac"  : 자바 소스를 바이트코드로 컴파일
                     |      |   |         |               |_▶ 1) <compile-java />   실행
                     |      |   |         |                   ▶  macrodef 실행
                     |      |   |         |
             ■■ 008  |      |   |     _●01 [T]"javac.tests" : 테스트 코드 컴파일
                     |      |   |    |                    |_▶ 1) <compile-java-test />  실행
                     |      |   |    |
             ■■ 009  |      |   |_●01 [T]"test.prod"  : 운영 모드 테스트 실행
                     |      |                       |_▶ 1) reports/htmlunit.prod 디렉토리 생성
                     |      |                       |_▶ 2) junit 테스트 실행
                     |      |                       |_▶   2-1) jvm 메모리설정
                     |      |                       |_▶   2-2) 프로퍼티 설정
                     |      |                       |_▶   2-3) 클래스 패스 설정
                     |      |                       |_▶   2-4) batchtest 설정
                     |      |
             ■■ 010  |      |         _●01 [T]"addons" : 애드온 복사  ♥♥♥한번 실행된 타겟은 실행하지 않음♥♥♥
                     |      |        |
             ■■ 011  |      |    _●01 [T]"javac" :                ♥♥♥한번 실행된 타겟은 실행하지 않음♥♥♥
                     |      |   |
        _____________|______|___|___________________[▼▼▼build-js-addons-compress.xml▼▼▼]________________________________________________________________
                     |      |   |      ●property (폴더정의)
                     |      |   |        "public"                   : src/main/java/com/lorepo/icplayer/public
                     |      |   |        "libs"                     : src/main/java/com/lorepo/icplayer/public/libs
                     |      |   |        "build.folder"             : src/main/java/com/lorepo/icplayer/public/build
                     |      |   |        "build.temp.folder"        : src/main/java/com/lorepo/icplayer/public/build/temp
                     |      |   |        "build.temp.addons.folder" : src/main/java/com/lorepo/icplayer/public/build/temp/addons
                     |      |   |        "build.dist.folder"        : src/main/java/com/lorepo/icplayer/public/build/dist
                     |      |   |        "addons.folder"            : src/main/java/com/lorepo/icplayer/public/addons
                     |      |   |        "addons.temp.file"         : src/main/java/com/lorepo/icplayer/public/build/temp/addons/addons.temp.xml
                     |      |   |        "addons.temp.header.file"  : src/main/java/com/lorepo/icplayer/public/build/temp/addons/addons.header.temp.xml
                     |      |   |        "addons.destination.file"  : src/main/java/com/lorepo/icplayer/public/build/dist/addons.min.xml
                     |      |   |
                     |      |   |
                     |      |   |
             ■■ 012  |      |   |               _●01 [T]"clear.addons" : addons 디렉토리 삭제
                     |      |   |              |        |_▶ 1) 디렉토리 삭제 : src/main/java/com/lorepo/icplayer/public/build/temp/addons
                     |      |   |              |                    
             ■■ 013  |      |   |          _●01 [T]"clear.temp" : temp 디렉토리 삭제
                     |      |   |         |             |_▶ 1) 디렉토리 삭제 : src/main/java/com/lorepo/icplayer/public/build/temp
                     |      |   |         |
             ■■ 014  |      |   |     _●01 [T]"clear.full" : build 디렉토리 삭제
                     |      |   |    |                  |_▶ 1) 디렉토리 삭제 : src/main/java/com/lorepo/icplayer/public/build
                     |      |   |    |
             ■■ 015  |      |   |    |_●02 [T]"init" : 필요한 폴더 구조 생성.
                     |      |   |    |                  |_▶ 1) 디렉토리 생성 : src/main/java/com/lorepo/icplayer/public/build/temp 
                     |      |   |    |                  |_▶ 2) 디렉토리 생성 : src/main/java/com/lorepo/icplayer/public/build/dist
                     |      |   |    |                  |_▶ 3) 디렉토리 생성 : src/main/java/com/lorepo/icplayer/public/build/temp/addons
                     |      |   |    |
             ■■ 016  |      |   |_●02 [T]"bundle-libs" : <import file="build-js-addons-compress.xml"/>
                     |      |   |                       bundle-libs 타겟 실행 시:
                     |      |   |                       |_▶ 1) 콘솔에 "Bundling libs" 메시지를 출력
                     |      |   |                       |_▶ 2) [T]"compile.and.copy.commons" : 공통 애드온 컴파일 및 클리어 
                     |______|___|_______________________|_______________________________________[▼▼▼./addons/Commons/build.xml▼▼▼]________________________
                     |      |   |                       |    ●property (폴더정의)
                     |      |   |                       |      "publish.dir"              : path_to\website-corporate\src\lorepo\templates\static_files\icplayer\libs
                     |      |   |                       |      "commons.version"          : 4.5.1  
                     |      |   |                       |      "publish-directory"        : path_to\website-corporate\src\lorepo\templates\static_files\icplayer\libs
                     |      |   |                       |
             ■■ 017  |      |   |                       |         _●01 [T]"compile" : 소스 파일을 컴파일하고 하나의 최적화된 파일로 최소화
                     |      |   |                       |        |             |_▶ 1) 디렉토리 생성 : bin
                     |      |   |                       |        |             |_▶ 2) 디렉토리 생성 : bin/commons-${commons.version}  <<< 4.5.1
                     |      |   |                       |        |             |_▶ 3) Google Closure Compiler 실행 : src 디렉터리의 여러 JS 파일을 병합 및 압축하여 최적화된 commons.js 생성.
                     |      |   |                       |        |             |_▶  3-1) jar실행 : ../tools/closure.jar 
                     |      |   |                       |        |             |_▶  3-2) 라인추가  : - -js src/model-validation.js
                     |      |   |                       |        |             |_▶  3-3) 라인추가  : - -js src/dom-operations.js
                     |      |   |                       |        |             |_▶  3-4) 라인추가  : - -js src/statefull-addon-object.js
                     |      |   |                       |        |             |_▶  3-5) 라인추가  : ... 위 3개 이외 27개 js 라인 추가 
                     |      |   |                       |        |             |_▶  3-6) 라인추가  : - -js_output_file bin/commons-${commons.version}/commons.js
                     |      |   |                       |        |             |_▶                ※bin/commons-4.5.1/commons.js 파일로 최소화
                     |      |   |                       |        |             |_▶  3-7) 라인추가  : 포함된 컴포넌트 정보와 버전 정보를 commons.js에 추가.
                     |      |   |                       |        |
                     |      |   |                       |_▶  2-1) [T]"publish" : ICPlayer 라이브러리에 Commons의 새 버전 배포 
                     |      |   |                       |                      |_▶ 1) "compile"에서 생성한 bin/commons-4.5.1/commons.js파일을
                     |      |   |                       |                              /src/main/java/com/lorepo/icplayer/public/libs/commons.js로 복사   
                     |      |   |                       |
                     |      |   |                       |_▶  2-2) [T]"clear"   : 주어진 디렉토리에 Commons의 새 버전 배포"
                     |      |   |                       |                      |_▶ 1) 디렉토리 삭제 : "compile"에서 생성한 bin 디렉토리
                     |      |   |                       |                      
                     |______|___|_______________________|_______________________________________[▲▲▲./addons/Commons/build.xml▲▲▲]________________________
             ■■ 018  |      |   |                       |      _●01 [T]"init"        : ♥♥♥한번 실행된 타겟은 실행하지 않음♥♥♥
                     |      |   |                       |     |
             ■■ 019  |      |   |                       |     |_●02 [T]"js.compress" : 각 JavaScript 라이브러리를 병합
                     |      |   |                       |     |               |_▶ 1) YUI Compressor를 사용하여 JavaScript 파일을 **압축(최적화)**
                     |      |   |                       |     |               |_▶ 2) 최적화된 파일들을 복사 : src/main/java/com/lorepo/icplayer/public/build/temp 
                     |      |   |                       |     |
                     |      |   |                       |_▶ 3) [T]"js.concatenate" : JavaScript 파일 압축 및 병합.
                     |      |   |                       |_▶ 4) [T]"addons.compress" : 애드온 파일(XML) 병합.
                     |      |   |                       |     |_▶ 1) XML 애드온 파일 병합 후 헤더 추가.
                     |      |   |                       |     |_▶ 2) [T]"clear.addons" : 에드온 임시 폴더 삭제
                     |      |   |                       |                 |_▶ 디렉토리 삭제 : src/main/java/com/lorepo/icplayer/public/build/temp/addons
                     |      |   |                       |     
             ■■ 020  |      |   |                       |      _●01 [T]"clear.addons" : ♥♥♥한번 실행된 타겟은 실행하지 않음♥♥♥
                     |      |   |                       |     |
                     |      |   |                       |_▶ 5) [T]"clear.temp" : 임시폴더 삭제
                     |      |   |                       |     |_▶ 1) 디렉토리 삭제 : src/main/java/com/lorepo/icplayer/public/build/temp
                     |      |   |                       |     
                     |      |   |                       |_▶ 6) 콘솔에 "Bundling ended with: SUCCESS" 메시지를 출력
                     |      |   |                                                                       
        _____________|______|___|___________________[▲▲▲build-js-addons-compress.xml▲▲▲]________________________________________________________________
                     |      |   |
             ■■ 021  |      |_●03 [T]"gwtc" : GWT 컴파일하여 JavaScript로 작성 (운영 모드)     
                     |                    |_▶ 1) GWT 컴파일러 실행: 지정된 클래스 경로와 JVM 옵션을 사용해 com.google.gwt.dev.Compiler를 실행합니다.
                     |                    |_▶ 2) classpath 설정
                     |                    |_▶   2-1) src 폴더              : src/main/java
                     |                    |_▶   2-2) icfoundation-src 폴더 : ../icfoundation/src/main/java
                     |                    |_▶   2-3) 프로젝트 클래스 패스
                     |                    |_▶       2-3-1) 기본폴더               : war/WEB-INF/classes 
                     |                    |_▶       2-3-2) gwt-user.jar 폴더    : build.properties 파일에서 지정
                     |                    |_▶       2-3-3) gwt-dev.jar  파일    : build.properties 파일에서 지정
                     |                    |_▶       2-3-4) 기본 lib 파일          : war/WEB-INF/lib/**/*.jar
                     |                    |_▶       2-3-5) jsoup-1.10.3.jar 폴더 : libs/jsoup-1.10.3.jar
                     |                    |_▶       2-3-5) icfoundation 클래스 폴더 : ../icfoundation/war/WEB-INF/classes
                     |                    |_▶   2-4) GA.jar 폴더           : ${gwt.sdk}/validation-api-1.0.0.GA.jar
                     |                    |_▶   2-5) GA-sources.jar 폴더   : ${gwt.sdk}/validation-api-1.0.0.GA-sources.jar
                     |                    |_▶ 3) JVM 메모리 설정
                     |                    |_▶ 4) 결과물이 저장될 디렉터리 이름 (여기서는 war)
                     |                    |_▶ 5) 결국, GWT Compiler(com.google.gwt.dev.Compiler) 실행 하여, Java 코드를 JavaScript로 변환 war 디렉터리에 저장
                     |
             ■■ 022  |_ ▶ [T]"create.package" : 패키지생성
                              |_▶ 1) 디렉토리 삭제 : dist
                              |_▶ 2) 디렉토리 생성 : dist/build
                              |_▶ 3) 디렉토리 복사 : war/icplayer 디렉터리의 모든 파일과 하위 폴더를 dist/build/icplayer로 복사 
                              |_▶ 4) 디렉토리 복사 : doc/demo 디렉터리의 모든 파일과 하위 폴더를 dist/build로 복사합니다.
                              |_▶ 5) 디렉토리 압축 : dist/build 디렉토리의 모든 내용을 압축하여 dist/icplayer.zip 파일로 만듭니다.
        --> 

    <property file="build.properties"/>
    <property name="src" location="src/main/java"/>
    <property name="src-test" location="src/test/java"/>
    <property name="icfoundation-src" location="../icfoundation/src/main/java"/>
    <property name="jstestdriver.jar" location="addons/tools/JsTestDriver-1.3.5.jar"/>
    <property name="libs" location="src/main/java/com/lorepo/icplayer/public/libs"/>
    <property name="jsoup-lib" location="libs/jsoup-1.10.3.jar"/>

    <!-- Arguments to gwtc and devmode targets -->
    <property name="gwt.args" value=""/>
    <import file="build-js-addons-compress.xml"/>

    <property name="libs.junit" location="libs/junit-4.9.jar"/>
    <path id="project.class.path">
        <pathelement location="war/WEB-INF/classes"/>
        <pathelement location="${gwt.sdk}/gwt-user.jar"/>
        <fileset dir="${gwt.sdk}" includes="gwt-dev*.jar"/>
        <!-- Add any additional non-server libs (such as JUnit) -->
        <fileset dir="war/WEB-INF/lib" includes="**/*.jar"/>
        <pathelement location="${jsoup-lib}"/>
        <pathelement location="../icfoundation/war/WEB-INF/classes"/>
    </path>

    <property name="reports.path" value="addons/reports.txt"/>

    <script language="javascript"><![CDATA[
        function noop () {}
        var listener = new org.apache.tools.ant.BuildListener() {
            buildStarted: noop,
            buildFinished: function(e) {
                project.executeTarget("server.kill");
            },
            messageLogged: noop,
            targetStarted: noop,
            targetFinished: noop,
            taskStarted: noop,
            taskFinished: noop
        }
        project.addBuildListener(listener)
    ]]></script>
    <condition property="isWindows">
        <os family="windows"/>
    </condition>

    <condition property="isUnix">
        <os family="unix"/>
    </condition>

    <target name="clean" description="Cleans this project">
        <delete dir="war/WEB-INF/classes" failonerror="false"/>
        <delete dir="war/icplayer" failonerror="false"/>
        <delete dir="gwt-unitCache" failonerror="false"/>
    </target>

    <target name="addons" description="Copy addon descriptors">
        <ant dir="addons"/>
    </target>

    <target name="javac" depends="addons" description="Compile java source to bytecode">
        <compile-java />
    </target>

    <macrodef name="compile-java">
        <sequential>
            <mkdir dir="war/WEB-INF/classes"/>
            <javac srcdir="${src}" includes="**" encoding="utf-8" destdir="war/WEB-INF/classes" source="1.6" target="1.6" nowarn="true" includeantruntime="false" debug="true" debuglevel="lines,vars,source">
                <classpath refid="project.class.path"/>
            </javac>
            <copy todir="war/WEB-INF/classes">
                <fileset dir="${src}" excludes="**/*.java"/>
                <fileset dir="${src-test}" excludes="**/*.java"/>
            </copy>
        </sequential>
    </macrodef>

    <target name="gwtc" depends="javac, bundle-libs" description="GWT compile to JavaScript (production mode)">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.Compiler">
            <classpath>
                <pathelement location="${src}"/>
                <pathelement location="${icfoundation-src}"/>
                <path refid="project.class.path"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
            </classpath>
            <!-- add jvmarg -Xss16M or similar if you see a StackOverflowError -->
            <jvmarg value="-Xmx256M"/>
            <arg line="-war"/>
            <arg value="war"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}"/>
            <arg value="com.lorepo.icplayer.Icplayer"/>
        </java>
    </target>

    <target name="devmode" depends="javac" description="Run development mode">
        <java failonerror="true" fork="true" classname="com.google.gwt.dev.DevMode">
            <classpath>
                <pathelement location="${src}"/>
                <path refid="project.class.path"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
            </classpath>
            <jvmarg value="-Xmx256M"/>
            <arg value="-startupUrl"/>
            <arg value="icplayer.html"/>
            <arg line="-war"/>
            <arg value="war"/>
            <!-- Additional arguments like -style PRETTY or -logLevel DEBUG -->
            <arg line="${gwt.args}"/>
            <arg value="com.lorepo.icplayer.Icplayer"/>
        </java>
    </target>

    <target name="javac.tests" depends="javac" description="Compiles test code">
        <compile-java-test />
    </target>

    <macrodef name="compile-java-test">
        <sequential>
            <javac srcdir="${src-test}" includes="**" encoding="utf-8" source="1.6" target="1.6" nowarn="true" includeantruntime="false" destdir="war/WEB-INF/classes" debug="true" debuglevel="lines,vars,source">
                <classpath location="${libs.junit}"/>
                <classpath location="../icfoundation/war/WEB-INF/classes"/>
                <classpath refid="project.class.path"/>
                <classpath>
                    <fileset dir="libs" includes="*.jar"/>
                </classpath>
            </javac>
        </sequential>
    </macrodef>

    <target name="test.dev" depends="javac.tests" description="Run development mode tests">
        <mkdir dir="reports/htmlunit.dev"/>
        <junit fork="yes" printsummary="yes" haltonfailure="yes" dir=".">
            <jvmarg line="-Xmx256m"/>
            <sysproperty key="gwt.args" value="-standardsMode -logLevel WARN"/>
            <sysproperty key="java.awt.headless" value="true"/>
            <classpath>
                <pathelement location="${icfoundation-src}"/>
                <pathelement location="${src}"/>
                <pathelement location="${src-test}"/>
                <path refid="project.class.path"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
                <pathelement location="${libs.junit}"/>
                <fileset dir="libs" includes="*.jar"/>
            </classpath>
            <batchtest todir="reports/htmlunit.dev">
                <fileset dir="${src-test}">
                    <include name="**/*TestCase.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain"/>
            <formatter type="xml"/>
        </junit>
    </target>

    <target name="test.prod" depends="javac.tests" description="Run production mode tests">
        <mkdir dir="reports/htmlunit.prod"/>
        <junit fork="yes" printsummary="yes" haltonfailure="yes" dir=".">
            <jvmarg line="-Xmx256m"/>
            <sysproperty key="gwt.args" value="-prod -standardsMode -logLevel WARN -standardsMode -out www-test"/>
            <sysproperty key="java.awt.headless" value="true"/>
            <classpath>
                <pathelement location="${icfoundation-src}"/>
                <pathelement location="${src}"/>
                <pathelement location="${src-test}"/>
                <path refid="project.class.path"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
                <pathelement location="${libs.junit}"/>
                <fileset dir="libs" includes="*.jar"/>
            </classpath>
            <batchtest todir="reports/htmlunit.prod">
                <fileset dir="${src-test}">
                    <include name="**/*TestCase.java"/>
                </fileset>
            </batchtest>
            <formatter type="plain"/>
        </junit>
    </target>

    <target name="browser.init" unless="browser.initialized">
        <!-- You can override this, ex disable google chrome by -DgoogleChrome.path='' -->
        <property name="googleChrome.path" if:set="isWindows" unless:set="googleChrome.path" 
                  value="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"/>
        <exec executable="which" osfamily="unix" unless:set="googleChrome.path" outputproperty="googleChrome.path">
            <arg line="google-chrome"/>
        </exec>
        <available property="googleChrome.available" type="file" file="${googleChrome.path}"/>
        <echo if:set="googleChrome.available">Google Chrome found at ${googleChrome.path}</echo>

        <property name="firefox.path" if:set="isWindows" unless:set="firefox.path"
                  value="C:\Program Files\Mozilla Firefox\firefox.exe"/>
        <exec executable="which" osfamily="unix" unless:set="firefox.path" outputproperty="firefox.path">
            <arg line="firefox"/>
        </exec>
        <available property="firefox.available" type="file" file="${firefox.path}"/>
        <echo if:set="firefox.available">Firefox found at ${firefox.path}</echo>

        <property name="msie.path" if:set="isWindows" unless:set="msie.path"
                  value="C:\Program Files\internet explorer\iexplore.exe"/>
        <available property="msie.available" type="file" file="${msie.path}"/>
        <echo if:set="msie.available">Microsoft Internet Explorer found at ${msie.path}</echo>

        <property name="msedge.path" if:set="isWindows" unless:set="msedge.path"
                  value="C:\Windows\SystemApps\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\MicrosoftEdge.exe"/>
        <available property="msedge.available" type="file" file="${msedge.path}"/>
        <echo if:set="msedge.available">Microsoft msedge found at ${msedge.path}</echo>

        <fail message="No available browser found!">
            <condition>
                <not>
                    <or>
                        <isset property="googleChrome.available"/>
                        <isset property="firefox.available"/>
                        <isset property="msedge.available"/>
                        <isset property="msie.available"/>
                    </or>
                </not>
            </condition>
        </fail>
        <property name="browser.initialized" value="true"/>
    </target>

    <target name="server.check">
        <condition property="server.has.ping">
            <socket server="localhost" port="9876"/>
        </condition>
        <antcall target="server.kill" unless:set="server.has.ping"/>
        <!-- Execute target in the same project scope -->
        <script language="javascript" unless:set="server.has.ping">
            project.executeTarget("server.start");
        </script>
    </target>

    <target name="server.get.pid">
        <exec executable="jps" failifexecutionfails="true" failonerror="true">
            <arg value="-lvm"/>
            <redirector outputproperty="server.pid">
                <outputfilterchain>
                    <linecontains>
                        <contains value="${jstestdriver.jar}"/>
                    </linecontains>
                    <replaceregex pattern="^(\d+)\s.*$" replace="\1"/>
                </outputfilterchain>
            </redirector>
        </exec>
        <condition property="server.has.pid">
            <length string="${server.pid}" when="greater" length="0"/>
        </condition>
        <echo if:set="server.has.pid">Found PID ${server.pid} of ${jstestdriver.jar}</echo>
    </target>

    <target name="server.kill" depends="server.get.pid" if="server.has.pid">
        <echo>Kill jsTestDriver server with PID ${server.pid}</echo>
        <exec executable="taskkill" osfamily="windows" failifexecutionfails="true">
            <arg line="/T"/>
            <arg line="/F"/>
            <arg line="/PID"/>
            <arg value="${server.pid}"/>
        </exec>
        <exec executable="taskkill" osfamily="windows" if:set="msedge.autoclose" failifexecutionfails="true">
            <arg line="/T"/>
            <arg line="/F"/>
            <arg line="/IM"/>
            <arg value="MicrosoftEdge.exe"/>
        </exec>
        <exec executable="pkill" osfamily="unix" failifexecutionfails="true">
            <arg line="-9"/>
            <arg line="-P"/>
            <arg value="${server.pid}"/>
        </exec>
        <exec executable="kill" osfamily="unix" failifexecutionfails="true">
            <arg line="-9"/>
            <arg value="${server.pid}"/>
        </exec>
        <sleep seconds="1"/>
        <delete dir="${firefox.profile}" failonerror="true"/>
    </target>

    <target name="server.start" depends="browser.init">
        <echo>Start a new server</echo>
        <!-- Generate firefox profile -->
        <exec executable="python" if:set="firefox.available" outputproperty="firefox.profile"
              failonerror="true" failifexecutionfails="true">
            <arg line="-c"/>
            <arg value="import tempfile;print(tempfile.mkdtemp('','jstestdriver.'))"/>
        </exec>
        <!-- Mark the first run as complete, stop to open the second tab -->
        <copy file="addons/tools/prefs.js" todir="${firefox.profile}" if:set="firefox.available"/>

        <condition property="googleChrome.command"
                   value="${googleChrome.path};--disable-gpu --headless --no-sandbox --remote-debugging-port=9222,"
                   else="">
            <isset property="googleChrome.available"/>
        </condition>
        <condition property="firefox.command"
                   value="${firefox.path};-headless -profile ${firefox.profile} -no-remote,"
                   else="">
            <isset property="firefox.available"/>
        </condition>
        <condition property="msie.command"
                   value="${msie.path},"
                   else="">
            <isset property="msie.available"/>
        </condition>
        <condition property="msedge.command"
                   value="C:\Windows\explorer.exe;microsoft-edge:%s,"
                   else="">
            <isset property="msedge.available"/>
        </condition>

        <parallel>
            <daemons>
                <java jar="${jstestdriver.jar}" fork="true">
                    <arg line="--port 9876"/>
                    <arg line="--browser"/>
                    <arg value="${googleChrome.command}${firefox.command}${msie.command}${msedge.command}"/>
<!--                    <arg line="&#45;&#45;browserTimeout 180000"/>-->
<!--                    <arg line="&#45;&#45;runnerMode INFO"/>-->
<!--                    <arg value="&#45;&#45;verbose"/>-->
                </java>
            </daemons>
            <waitfor maxwait="5" maxwaitunit="second">
                <socket server="localhost" port="9876"/>
            </waitfor>
<!--            <echo >Wait 3 seconds for other browsers at http://localhost:9876/capture</echo>-->
            <sleep seconds="1"/>
        </parallel>
    </target>

    <macrodef name="reset-addons-reports">
        <sequential>
            <delete file="${reports.path}" failonerror="false"/>
            <touch file="${reports.path}"/>
        </sequential>
    </macrodef>

    <macrodef name="attach-results-to-addons-reports">
        <attribute name="addon.id"/>

        <sequential>
            <fileset id="error.files" dir="addons/@{addon.id}/test-reports" includes="TEST-*.xml">
                <contains text="&lt;error " casesensitive="no"/>
            </fileset>

            <fileset id="failure.files" dir="addons/@{addon.id}/test-reports" includes="TEST-*.xml">
                <contains text="&lt;failure " casesensitive="no"/>
            </fileset>

            <local name="has-errors"/>
            <condition property="has-errors">
                <resourcecount when="greater" count="0" refid="error.files"/>
            </condition>

            <local name="has-failures"/>
            <condition property="has-failures">
                <resourcecount when="greater" count="0" refid="failure.files"/>
            </condition>

            <local name="error.filenames"/>
            <pathconvert pathsep="${line.separator}   [errors] " property="error.filenames" refid="error.files">
                <mapper type="flatten"/>
            </pathconvert>

            <local name="failure.filenames"/>
            <pathconvert pathsep="${line.separator} [failures] " property="failure.filenames" refid="failure.files">
                <mapper type="flatten"/>
            </pathconvert>

            <echo file="${reports.path}" append="true" if:set="has-errors"
                  message="   [errors] ${error.filenames}${line.separator}"/>
            <echo file="${reports.path}" append="true" if:set="has-failures"
                  message=" [failures] ${failure.filenames}${line.separator}"/>
        </sequential>
    </macrodef>

    <macrodef name="count-lines">
        <attribute name="property"/>
        <attribute name="string"/>

        <sequential>
            <resourcecount property="@{property}">
                <tokens>
                    <concat>
                        <filterchain>
                            <tokenfilter>
                                <linetokenizer/>
                            </tokenfilter>
                        </filterchain>
                        <propertyresource name="@{string}"/>
                    </concat>
                </tokens>
            </resourcecount>
        </sequential>
    </macrodef>

    <macrodef name="summary-addons-reports">
        <sequential>
            <local name="reports.list"/>
            <loadfile property="reports.list" srcFile="${reports.path}" quiet="true"/>
            <local name="reports.total"/>
            <count-lines property="reports.total" string="reports.list" if:set="reports.list"/>

            <local name="reports.message"/>
            <property name="reports.message" value="Found problems in ${reports.total} reports:&#x0A;${reports.list}" if:set="reports.list"/>
            <fail if="reports.list" message="${reports.message}"/>
        </sequential>
    </macrodef>

    <target name="test.single.addon" depends="server.check" description="Test single addon, -Daddon.id=Addon_Id">
        <echo>Testing addon with ID "${addon.id}"</echo>

        <reset-addons-reports unless:set="subtask"/>
        <delete dir="addons/${addon.id}/test-reports" failonerror="false"/>
        <mkdir dir="addons/${addon.id}/test-reports"/>

        <!-- Three minutes to test the addon should be enough -->
        <java jar="${jstestdriver.jar}" fork="true" timeout="180000" resultproperty="jstestdriver.code">
            <arg line="--tests all"/>
            <arg line="--config"/>
            <arg path="addons/${addon.id}/jsTestDriver.conf"/>
            <arg line="--testOutput"/>
            <arg path="addons/${addon.id}/test-reports"/>
            <arg line="--captureConsole"/>
            <arg line="--reset"/>
        </java>
        <condition property="jstestdriver.failure">
            <isfailure code="${jstestdriver.code}"/>
        </condition>
        <antcall target="server.kill" if:set="jstestdriver.failure"/>
        <condition property="browser.unresponsive">
            <equals arg1="1" arg2="${jstestdriver.code}"/>
        </condition>
        <!-- Try to test addon one more time, after BrowserPanicException -->
        <antcall target="retest.single.addon" if:set="browser.unresponsive">
            <param name="addon.id" value="${addon.id}"/>
        </antcall>

        <attach-results-to-addons-reports addon.id="${addon.id}"/>
        <summary-addons-reports unless:set="subtask"/>
    </target>

    <target name="retest.single.addon" depends="server.start" description="Test single addon, -Daddon.id=Addon_Id">
        <echo>Re-testing addon with ID "${addon.id}"</echo>

        <!-- One minute to test the addon should be enough -->
        <java jar="${jstestdriver.jar}" fork="true" timeout="60000" resultproperty="jstestdriver.code2">
            <arg line="--tests all"/>
            <arg line="--config"/>
            <arg path="addons/${addon.id}/jsTestDriver.conf"/>
            <arg line="--testOutput"/>
            <arg path="addons/${addon.id}/test-reports"/>
            <arg line="--captureConsole"/>
            <arg line="--reset"/>
        </java>
        <condition property="jstestdriver.failure2">
            <isfailure code="${jstestdriver.code2}"/>
        </condition>
        <antcall target="server.kill" if:set="jstestdriver.failure2"/>
    </target>

    <target name="test.addons" depends="bundle-libs, browser.init">
        <echo>${ant.version}</echo>

        <reset-addons-reports/>

        <antcall target="test.single.addon">
            <param name="addon.id" value="Commons"/>
            <param name="subtask" value="true"/>
        </antcall>
        <loadfile property="addons.list" srcFile="addons/addons.list"/>
        <for list="${addons.list}" param="addonid" delimiter="${line.separator}">
            <sequential>
                <antcall target="test.single.addon">
                    <param name="addon.id" value="@{addonid}"/>
                    <param name="subtask" value="true"/>
                </antcall>
            </sequential>
        </for>

        <summary-addons-reports/>
    </target>

    <target name="test" depends="test.prod" description="Run development and production mode tests">
    </target>

    <target name="test.full" description="Run development, production and addons tests" depends="test">
        <antcall target="test.addons"/>
    </target>

    <target name="build" depends="clean, test, gwtc" description="Build this project"/>

    <target name="build.full" depends="clean, test.full, gwtc" description="Build this project with addon tests"/>

    <target name="create.package">
        <delete dir="dist" failonerror="false"/>
        <mkdir dir="dist/build"/>

        <copy todir="dist/build/icplayer">
            <fileset dir="war/icplayer"/>
        </copy>
        <copy todir="dist/build">
            <fileset dir="doc/demo"/>
        </copy>

        <zip destfile="dist/icplayer.zip" basedir="dist/build"/>
    </target>

    <target name="dist" depends="validate-translations-javascript, build" description="Create player package">
        <antcall target="create.package"/>
    </target>

    <target name="dist.full" depends="build.full" description="Create player package after full build">
        <antcall target="create.package"/>
    </target>

    <target name="validate-translations-javascript">
        <echo message="Validating JSON in files:"/>

        <exec executable="python" failonerror="true" failifexecutionfails="true">
            <arg value="validate_translations_javascript.py"/>
        </exec>

        <echo message="All ok"/>
    </target>

    <target name="test.case" depends="javac.tests" description="Run production single testcase">
        <mkdir dir="reports/htmlunit.prod"/>
        <junit fork="yes" printsummary="yes" haltonfailure="yes" dir=".">
            <jvmarg line="-Xmx256m"/>
            <sysproperty key="gwt.args" value="-prod -standardsMode -logLevel WARN -standardsMode -out www-test"/>
            <sysproperty key="java.awt.headless" value="true"/>
            <classpath>
                <pathelement location="${icfoundation-src}"/>
                <pathelement location="${src}"/>
                <pathelement location="${src-test}"/>
                <path refid="project.class.path"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
                <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
                <pathelement location="${libs.junit}"/>
                <fileset dir="libs" includes="*.jar"/>
            </classpath>
            <test todir="reports/htmlunit.prod" name="test.java.com.lorepo.icplayer.client.module.text.GWTTextModelTestCase"/>
            <formatter type="plain"/>
        </junit>
    </target>

    <macrodef name="test-single-case">
        <sequential>
            <mkdir dir="reports/htmlunit.prod"/>
            <junit fork="yes" printsummary="yes" haltonfailure="yes" dir=".">
                <jvmarg line="-Xmx256m"/>
                <sysproperty key="gwt.args" value="-prod -standardsMode -logLevel WARN -standardsMode -out www-test"/>
                <sysproperty key="java.awt.headless" value="true"/>
                <classpath>
                    <pathelement location="${icfoundation-src}"/>
                    <pathelement location="${src}"/>
                    <pathelement location="${src-test}"/>
                    <path refid="project.class.path"/>
                    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA.jar"/>
                    <pathelement location="${gwt.sdk}/validation-api-1.0.0.GA-sources.jar"/>
                    <fileset dir="libs" includes="*.jar"/>
                </classpath>
                <batchtest todir="reports/htmlunit.prod">
                    <fileset dir="${src-test}">
                        <include name="**/${name}.java"/>
                    </fileset>
                </batchtest>
                <formatter type="plain"/>
            </junit>
        </sequential>
    </macrodef>

    <target name="test.single.case" depends="javac.tests" description="Run production single testcase, -Dname=Test_Case_Name">
        <test-single-case />
    </target>

    <!-- This target doesn't copy addons, so it is faster than test.single.case (in my case twice as fast) -->
    <target name="test.single.case.java" description="Run production single testcase without copying addons, -Dname=Test_Case_Name">
        <compile-java/>
        <compile-java-test/>
        <test-single-case/>
    </target>
</project>
